#! /usr/bin/env python3

import sys
from math import *

def usage():
    print("USAGE\n    ./110borwein n\n\nDESCRIPTION")
    print("    n   constant defining the integral to be computed\n")
    exit(0)

lower, upper, subinterval = 0, 5000, 10000
dx = (upper - lower) / subinterval

def print_results(n, result):
    sys.stdout.write("\nI%d = %.10f\ndiff = %.10f\n" % (n, result, abs(result - (pi / 2))))

def borwein(x, n):
    res, tmp = 1, 0
    a = float(0)

    if (x == 0):
        return (1)
    while (a <= n):
        tmp = (sin(x / (2 * a + 1))) / (x / (2 * a + 1))
        if (a == 0):
            res = tmp
        else:
            res *= tmp
        a += 1
    return (res)

def midpoint_rule(n):
    x = 0
    area = 0

    for a in range(subinterval):
        x = lower + dx * (a + 0.5)
        area += borwein(x, n) * dx
    return (area)

def trapezoidal_rule(n):
    area = dx * (borwein(lower, n) + borwein(upper, n))

    for a in range(1, subinterval):
        x = lower + a * dx
        area += borwein(x, n)
    return (dx * area)

def simpson_rule(n):
    area = 0

    for a in range(subinterval):
        x1 = lower + a * dx
        x2 = lower + (a + 1) * dx
        area += (x2 - x1) / 6 * (borwein(x1, n) + 4 * borwein((x1 + x2) / 2, n) + borwein(x2, n))
    return (area)

def print_rule(string, n, res):
    sys.stdout.write(string)
    print_results(n, res)

def main():
    if (len(sys.argv) > 1 and sys.argv[1] == "-h"):
        usage()
    if (len(sys.argv) != 2 or not sys.argv[1].isdigit()):
        return (84)
    n = float(sys.argv[1])
    if (n > upper):
        return (84)
    print_rule("Midpoint:", n, midpoint_rule(n))
    print_rule("\nTrapezoidal:", n, trapezoidal_rule(n))
    print_rule("\nSimpson:", n, simpson_rule(n))
    return (0)

exit(main())